# simulate_microgreen.py
# -*- coding: utf-8 -*-
import math
import time
import random
import datetime as dt

# ======== ‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° (‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ) ========
FAN_ON_RANGE = (15.0, 30.0)     # 15‚Äì30 ¬∞C ‚Üí ‡∏û‡∏±‡∏î‡∏•‡∏° ON, ‡∏ô‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á ‚Üí OFF
PUMP_ON_THRESHOLD = 70.0        # Soil < 70% ‚Üí ‡∏õ‡∏±‡πä‡∏° ON, ‚â•70% ‚Üí OFF
LIGHT_DELAY_DAYS = 3            # ‡πÑ‡∏ü‡∏õ‡∏•‡∏π‡∏Å: ‡πÄ‡∏£‡∏¥‡πà‡∏° OFF ‡πÅ‡∏•‡∏∞ "‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î" ‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å N ‡∏ß‡∏±‡∏ô

PRINT_EVERY_SEC = 2             # ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ó‡∏∏‡∏Å‡∏Å‡∏µ‡πà‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
# ========================================

# ‡∏ä‡πà‡∏ß‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á
def eta_txt(t: dt.datetime):
    now = dt.datetime.now()
    if t <= now:
        return "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß"
    d = t - now
    days = d.days
    h = d.seconds // 3600
    m = (d.seconds % 3600) // 60
    return f"‡∏≠‡∏µ‡∏Å {days} ‡∏ß‡∏±‡∏ô {h} ‡∏ä‡∏°. {m} ‡∏ô‡∏≤‡∏ó‡∏µ"

class GreenhouseSim:
    """
    ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö mean-reverting + ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå
    - Temp ‡∏ñ‡∏π‡∏Å‡∏î‡∏∂‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≤ temp_target (‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≠‡∏¢ ‡πÜ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡πâ‡∏≤ ‡πÜ ‡∏ï‡∏≤‡∏°‡πÑ‡∏ã‡∏ô‡πå‡πÄ‡∏ß‡∏ü/‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏ö‡∏≤ ‡πÜ)
    - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡∏ß‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏±‡∏ö Temp ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏ï‡∏≠‡∏ô‡∏õ‡∏±‡πä‡∏° ON
    - Soil moisture ‡∏Ñ‡πà‡∏≠‡∏¢ ‡πÜ ‡πÅ‡∏´‡πâ‡∏á (evaporation) ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏±‡πä‡∏° OFF ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≠‡∏¢ ‡πÜ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏±‡πä‡∏° ON
    - ‡∏°‡∏µ noise ‡πÄ‡∏•‡πá‡∏Å ‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    """

    def __init__(self):
        # ‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏Ñ‡πà‡∏≤ realistic)
        self.temp = 26.0         # ¬∞C
        self.rh_air = 65.0       # %RH
        self.soil = 68.0         # % (0 ‡πÅ‡∏´‡πâ‡∏á‡∏™‡∏ô‡∏¥‡∏ó, 100 ‡πÄ‡∏õ‡∏µ‡∏¢‡∏Å‡∏°‡∏≤‡∏Å)

        # ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô/‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô (‡∏à‡∏≥‡∏•‡∏≠‡∏á 24h ‡∏î‡πâ‡∏ß‡∏¢‡πÑ‡∏ã‡∏ô‡πå‡πÄ‡∏ß‡∏ü‡∏ä‡πâ‡∏≤ ‡πÜ)
        self.t0 = time.time()
        self.day_amplitude = 4.0       # ‡∏ä‡πà‡∏ß‡∏á‡πÅ‡∏Å‡∏ß‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô/‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô ~¬±4¬∞C
        self.base_temp = 25.0          # ‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
        self.base_rh = 60.0            # RH ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô

        # ‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)
        self.alpha_temp = 0.07         # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥
        self.alpha_rh = 0.1            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏±‡∏ö RH
        self.evap_rate = 0.20          # ‡∏î‡∏¥‡∏ô‡πÅ‡∏´‡πâ‡∏á‡∏•‡∏á/‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏±‡πä‡∏° OFF) ‡∏´‡∏ô‡πà‡∏ß‡∏¢ %/min
        self.irrig_rate = 0.60         # ‡∏î‡∏¥‡∏ô‡∏ä‡∏∑‡πâ‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô/‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏±‡πä‡∏° ON) ‡∏´‡∏ô‡πà‡∏ß‡∏¢ %/min

        # noise
        self.temp_noise = 0.08         # ¬∞C ‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö
        self.rh_noise = 0.15           # % ‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö
        self.soil_noise = 0.1          # % ‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö (‡∏ô‡πâ‡∏≠‡∏¢‡∏°‡∏≤‡∏Å)

        # ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå actuator
        self.fan = "OFF"
        self.pump = "OFF"

        # ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏õ‡∏•‡∏π‡∏Å
        self.light_on_at = dt.datetime.now() + dt.timedelta(days=LIGHT_DELAY_DAYS)

    def _day_cycle_temp_target(self):
        # ‡πÑ‡∏ã‡∏ô‡πå‡πÄ‡∏ß‡∏ü 24 ‡∏ä‡∏°.: 2œÄ * (‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á/24)
        hours = (time.time() - self.t0) / 3600.0
        return self.base_temp + self.day_amplitude * math.sin(2 * math.pi * hours / 24.0)

    def step(self, dt_sec: float):
        # ---- 1) ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à actuator ‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ----
        self.fan = "ON" if (FAN_ON_RANGE[0] <= self.temp <= FAN_ON_RANGE[1]) else "OFF"
        self.pump = "ON" if (self.soil < PUMP_ON_THRESHOLD) else "OFF"

        # ---- 2) ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢/‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏±‡∏ö ----
        temp_target = self._day_cycle_temp_target()
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ó‡∏≠‡∏°‡∏™‡∏ß‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏±‡∏ö RH ‡πÄ‡∏•‡πá‡∏Å ‡πÜ (‡∏¢‡∏¥‡πà‡∏á‡∏£‡πâ‡∏≠‡∏ô RH ‡∏à‡∏∞‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ï‡πà‡∏≥‡∏•‡∏á)
        rh_target = self.base_rh - 0.4 * (self.temp - self.base_temp)
        # ‡∏ñ‡πâ‡∏≤‡∏õ‡∏±‡πä‡∏° ON ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏°‡∏±‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
        if self.pump == "ON":
            rh_target += 2.0

        # ---- 3) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö mean-reverting + noise ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ----
        # ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥
        self.temp += self.alpha_temp * (temp_target - self.temp) + random.uniform(-self.temp_noise, self.temp_noise)
        self.temp = max(10.0, min(40.0, self.temp))  # ‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô DHT11

        # RH ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
        self.rh_air += self.alpha_rh * (rh_target - self.rh_air) + random.uniform(-self.rh_noise, self.rh_noise)
        self.rh_air = max(30.0, min(95.0, self.rh_air))

        # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏î‡∏¥‡∏ô: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡πä‡∏° (‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ï‡πà‡∏≠ "‡∏ô‡∏≤‡∏ó‡∏µ" ‚Üí ‡∏ï‡πà‡∏≠ dt_sec)
        if self.pump == "ON":
            self.soil += self.irrig_rate * (dt_sec / 60.0)
        else:
            self.soil -= self.evap_rate * (dt_sec / 60.0)

        # ‡πÉ‡∏™‡πà noise ‡πÄ‡∏ö‡∏≤ ‡πÜ + ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ä‡πà‡∏ß‡∏á
        self.soil += random.uniform(-self.soil_noise, self.soil_noise)
        self.soil = max(10.0, min(95.0, self.soil))

    def light_status(self):
        return "ON" if dt.datetime.now() >= self.light_on_at else "OFF"

    def light_note(self):
        if self.light_status() == "ON":
            return "(‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏∂‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î)"
        return f"(‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {self.light_on_at.strftime('%Y-%m-%d %H:%M')} ‚Äî {eta_txt(self.light_on_at)})"

def main():
    sim = GreenhouseSim()
    print("=== Microgreen Controller Simulation (Realistic) ===")
    print(f"- ‡∏Å‡∏é‡∏û‡∏±‡∏î‡∏•‡∏° : {FAN_ON_RANGE[0]}‚Äì{FAN_ON_RANGE[1]} ¬∞C ‚Üí ON")
    print(f"- ‡∏Å‡∏é‡∏õ‡∏±‡πä‡∏°  : Soil < {PUMP_ON_THRESHOLD:.0f}% ‚Üí ON, ‚â•{PUMP_ON_THRESHOLD:.0f}% ‚Üí OFF")
    print(f"- ‡πÑ‡∏ü‡∏õ‡∏•‡∏π‡∏Å  : OFF ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å {LIGHT_DELAY_DAYS} ‡∏ß‡∏±‡∏ô")
    print("‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î\n")

    tick = 0
    while True:
        tick += 1
        start = time.time()

        # 1 step
        sim.step(PRINT_EVERY_SEC)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏ß‡∏¢ ‡πÜ ‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î
        now = dt.datetime.now().strftime("%H:%M:%S")
        print(
            f"[{now}] ‡∏£‡∏≠‡∏ö {tick:>4d} | "
            f"üå° Temp {sim.temp:>5.1f}¬∞C | "
            f"üíß Air {sim.rh_air:>5.1f}% | "
            f"ü™¥ Soil {sim.soil:>5.1f}% | "
            f"üßä Fan {sim.fan:<3s} | "
            f"üö∞ Pump {sim.pump:<3s} | "
            f"üí° Light {sim.light_status()} {sim.light_note()}"
        )

        # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
        elapsed = time.time() - start
        sleep = max(0.0, PRINT_EVERY_SEC - elapsed)
        time.sleep(sleep)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß üëç")
 